name: Terraform 模块扫描

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  scan-terraform-folders:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 扫描当前分支的 Terraform 目录
        id: scan-modules
        run: |
          echo "当前分支: $(git rev-parse --abbrev-ref HEAD)"
          echo "扫描 terraform 目录..."
          
          # 检查目录是否存在
          if [ -d "terraform" ]; then
            echo "找到 terraform 目录"
            echo "内容:"
            ls -la terraform/
            
            # 查找所有直接子目录
            echo "查找子目录..."
            SUBDIRS=$(find terraform -maxdepth 1 -mindepth 1 -type d)
            
            if [ -n "$SUBDIRS" ]; then
              echo "找到以下子目录:"
              echo "$SUBDIRS"
              
              # 构建模块选项
              MODULE_OPTIONS=""
              for dir in $SUBDIRS; do
                module_name=$(basename "$dir")
                echo "  - $module_name"
                MODULE_OPTIONS="${MODULE_OPTIONS}          - ${module_name}\n"
              done
              
              # 保存为多行输出
              echo "module_options<<EOF" >> $GITHUB_OUTPUT
              echo -e "$MODULE_OPTIONS" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "未找到子目录"
              echo "module_options=          - example-module" >> $GITHUB_OUTPUT
            fi
          else
            echo "terraform 目录不存在"
            echo "module_options=          - example-module" >> $GITHUB_OUTPUT
          fi
      
      - name: 创建 Terraform 工作流文件
        run: |
          mkdir -p .github/workflows
          
          # 获取当前分支
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # 创建工作流文件
          cat > .github/workflows/terraform-deploy.yml << EOL
          name: Terraform 部署
          
          on:
            workflow_dispatch:
              inputs:
                branch:
                  description: '选择分支'
                  required: true
                  default: '$CURRENT_BRANCH'
                  type: choice
                  options:
                    - $CURRENT_BRANCH
                    - master
                    - test-feature
                    - test2
                terraform_module:
                  description: '选择 Terraform 模块'
                  required: true
                  type: choice
                  options:
          ${{ steps.scan-modules.outputs.module_options }}
                environment:
                  description: '选择环境'
                  required: true
                  type: choice
                  options:
                    - dev
                    - test
                    - prod
                action:
                  description: '执行操作'
                  required: true
                  type: choice
                  options:
                    - plan
                    - apply
                    - destroy
          
          jobs:
            terraform-operation:
              runs-on: ubuntu-latest
              environment: \${{ github.event.inputs.environment }}
              
              steps:
                - name: 检出代码
                  uses: actions/checkout@v3
                  with:
                    ref: \${{ github.event.inputs.branch }}
                
                - name: 设置 Terraform
                  uses: hashicorp/setup-terraform@v2
                
                - name: 检查模块路径
                  run: |
                    MODULE_PATH="terraform/\${{ github.event.inputs.terraform_module }}"
                    if [ ! -d "\$MODULE_PATH" ]; then
                      echo "错误: 模块目录不存在: \$MODULE_PATH"
                      exit 1
                    fi
                
                - name: Terraform 初始化
                  working-directory: terraform/\${{ github.event.inputs.terraform_module }}
                  run: terraform init
                
                - name: Terraform 计划
                  working-directory: terraform/\${{ github.event.inputs.terraform_module }}
                  run: terraform plan -out=tfplan
                
                - name: Terraform 应用
                  if: github.event.inputs.action == 'apply'
                  working-directory: terraform/\${{ github.event.inputs.terraform_module }}
                  run: terraform apply -auto-approve tfplan
                
                - name: Terraform 销毁
                  if: github.event.inputs.action == 'destroy'
                  working-directory: terraform/\${{ github.event.inputs.terraform_module }}
                  run: terraform destroy -auto-approve
          EOL
          
          echo "已创建工作流文件: .github/workflows/terraform-deploy.yml"
          cat .github/workflows/terraform-deploy.yml
      
      - name: 提交更改
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .github/workflows/terraform-deploy.yml
          git commit -m "更新 Terraform 部署工作流文件" || echo "没有变更需要提交"
          git push || echo "推送失败，可能是权限问题"
