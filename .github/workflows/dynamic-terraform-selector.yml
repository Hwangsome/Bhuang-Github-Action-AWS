name: 扫描并创建 Terraform 工作流

on:
  workflow_dispatch:
  push:
    paths:
      - 'terraform/**'
    branches:
      - main
      - master

permissions:
  contents: write

jobs:
  scan-and-create-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 检查 Terraform 目录
        run: |
          echo "当前目录: $(pwd)"
          echo "目录内容:"
          ls -la
          
          if [ -d "terraform" ]; then
            echo "找到 terraform 目录"
            echo "Terraform 目录内容:"
            ls -la terraform/
          else
            echo "未找到 terraform 目录，创建一个..."
            mkdir -p terraform/ec2
            echo "# Example EC2 module" > terraform/ec2/main.tf
            echo "创建了示例 terraform/ec2 目录"
          fi
      
      - name: 扫描 Terraform 模块
        id: scan-modules
        run: |
          echo "扫描 terraform 目录中的模块..."
          
          if [ -d "terraform" ]; then
            # 查找所有子目录
            MODULES=$(find terraform -maxdepth 1 -mindepth 1 -type d | sort)
            
            if [ -z "$MODULES" ]; then
              echo "警告: 未找到 terraform 模块"
              echo "模块选项将使用默认值"
              MODULE_OPTIONS="          - example-module"
            else
              # 提取模块名称并构建选项
              MODULE_OPTIONS=""
              MODULES_LIST=()
              
              for module in $MODULES; do
                module_name=$(basename "$module")
                MODULES_LIST+=("$module_name")
                MODULE_OPTIONS="${MODULE_OPTIONS}          - ${module_name}\n"
              done
              
              echo "找到以下模块:"
              printf "  - %s\n" "${MODULES_LIST[@]}"
            fi
          else
            echo "错误: terraform 目录不存在"
            MODULE_OPTIONS="          - example-module"
          fi
          
          # 保存模块选项供后续步骤使用
          echo "module_options<<EOF" >> $GITHUB_OUTPUT
          echo -e "$MODULE_OPTIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 创建工作流文件
        run: |
          # 确保目录存在
          mkdir -p .github/workflows
          
          # 设置工作流文件路径
          WORKFLOW_FILE=".github/workflows/terraform-deploy.yml"
          
          # 创建工作流文件内容
          cat > $WORKFLOW_FILE << EOL
name: Terraform 部署

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择分支'
        required: true
        default: '${{ github.ref_name }}'
        type: choice
        options:
          - ${{ github.ref_name }}
          - develop
          - staging
          - production
      terraform_module:
        description: '选择 Terraform 模块'
        required: true
        type: choice
        options:
${{ steps.scan-modules.outputs.module_options }}
      environment:
        description: '选择部署环境'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod
      action:
        description: '执行操作'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  terraform-operation:
    runs-on: ubuntu-latest
    environment: \${{ github.event.inputs.environment }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          ref: \${{ github.event.inputs.branch }}
      
      - name: 设置 Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform 初始化
        working-directory: terraform/\${{ github.event.inputs.terraform_module }}
        run: terraform init
      
      - name: Terraform 计划
        working-directory: terraform/\${{ github.event.inputs.terraform_module }}
        run: terraform plan -out=tfplan
      
      - name: Terraform 应用
        if: github.event.inputs.action == 'apply'
        working-directory: terraform/\${{ github.event.inputs.terraform_module }}
        run: terraform apply -auto-approve tfplan
      
      - name: Terraform 销毁
        if: github.event.inputs.action == 'destroy'
        working-directory: terraform/\${{ github.event.inputs.terraform_module }}
        run: terraform destroy -auto-approve
EOL

          echo "工作流文件已创建: $WORKFLOW_FILE"
          echo "文件内容:"
          cat $WORKFLOW_FILE
      
      - name: 调试 Git 状态
        run: |
          echo "Git 状态:"
          git status
          
          echo "检查工作流文件是否存在:"
          if [ -f ".github/workflows/terraform-deploy.yml" ]; then
            echo "文件存在"
          else
            echo "文件不存在"
          fi
          
          echo "文件差异:"
          git diff
      
      - name: 提交更改
        run: |
          # 配置 Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 添加并提交文件
          git add .github/workflows/terraform-deploy.yml
          
          # 使用 --allow-empty 允许空提交
          git commit -m "更新 Terraform 部署工作流 [skip ci]" --allow-empty || echo "没有更改需要提交"
          
          # 推送更改
          git push || echo "推送失败，可能是权限问题"
