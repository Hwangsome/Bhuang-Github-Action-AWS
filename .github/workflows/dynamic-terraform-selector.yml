name: 动态 Terraform 模块选择器

# 此工作流分为两部分：
# 1. 首先获取分支列表和每个分支下的 Terraform 模块列表
# 2. 然后使用这些信息运行实际的 Terraform 操作

on:
  workflow_dispatch:
    # 初始时只提供一个刷新选项
    inputs:
      action:
        description: '操作'
        required: true
        default: 'refresh_modules'
        type: choice
        options:
          - refresh_modules
          - run_terraform

permissions:
  contents: write

jobs:
  # 第一个工作流：用于刷新可用的分支和模块列表
  refresh-terraform-modules:
    if: github.event.inputs.action == 'refresh_modules'
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取所有分支

      - name: 获取所有分支
        id: get-branches
        run: |
          BRANCHES=$(git branch -r | grep -v HEAD | sed 's/origin\///g' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "找到的分支: $BRANCHES"
      
      - name: 获取每个分支的 Terraform 模块
        id: get-modules
        run: |
          ALL_MODULES="{}"
          
          for branch in $(echo '${{ steps.get-branches.outputs.branches }}' | jq -r '.[]'); do
            echo "检查分支: $branch"
            git checkout $branch
            
            if [ -d "terraform" ]; then
              # 列出 terraform 目录下的所有子目录
              MODULES=$(ls -d terraform/*/ 2>/dev/null | sed 's/terraform\///g' | sed 's/\///g' | jq -R -s -c 'split("\n") | map(select(length > 0))')
              ALL_MODULES=$(echo $ALL_MODULES | jq --arg branch "$branch" --argjson modules "$MODULES" '. + {($branch): $modules}')
              echo "分支 $branch 的模块: $MODULES"
            else
              echo "分支 $branch 中没有 terraform 目录"
              ALL_MODULES=$(echo $ALL_MODULES | jq --arg branch "$branch" '. + {($branch): []}')
            fi
          done
          
          echo "all_modules=$ALL_MODULES" >> $GITHUB_OUTPUT
          echo "所有模块映射: $ALL_MODULES"
      
      - name: 创建配置文件
        run: |
          mkdir -p .github/terraform-modules
          echo '${{ steps.get-branches.outputs.branches }}' > .github/terraform-modules/branches.json
          echo '${{ steps.get-modules.outputs.all_modules }}' > .github/terraform-modules/modules.json
      
      - name: 提交更新的模块列表
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/terraform-modules/
          git commit -m "更新 Terraform 模块列表" || echo "没有变更需要提交"
          git push

  # 第二个工作流：实际运行 Terraform 操作
  # 这需要先手动运行第一个工作流来更新模块列表
  terraform-operations:
    if: github.event.inputs.action == 'run_terraform'
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置工作流输入
        id: set-matrix
        run: |
          # 读取预先生成的分支和模块列表
          if [ -f .github/terraform-modules/branches.json ]; then
            BRANCHES=$(cat .github/terraform-modules/branches.json)
            echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          else
            echo "警告: branches.json 不存在"
            echo "branches=[\"master\"]" >> $GITHUB_OUTPUT
          fi
          
          if [ -f .github/terraform-modules/modules.json ]; then
            MODULES=$(cat .github/terraform-modules/modules.json)
            echo "modules=$MODULES" >> $GITHUB_OUTPUT
          else
            echo "警告: modules.json 不存在"
            echo "modules={}" >> $GITHUB_OUTPUT
          fi

      - name: 生成并保存分支列表
        run: |
          # 保存分支列表为字符串
          BRANCHES_JSON='${{ steps.set-matrix.outputs.branches }}'
          echo "BRANCHES_JSON=$BRANCHES_JSON" >> $GITHUB_ENV
      
      - name: 生成 Terraform 执行工作流
        run: |
          mkdir -p .github/workflows
          
          # 使用双引号 EOL 允许变量替换
          cat > .github/workflows/terraform-executor.yml << EOL
          name: Terraform 执行器
          
          on:
            workflow_dispatch:
              inputs:
                branch:
                  description: '选择分支'
                  required: true
                  type: choice
                  options: ${BRANCHES_JSON}
                terraform_module:
                  description: '选择 Terraform 模块'
                  required: true
                  type: string
          
          jobs:
            terraform-plan:
              runs-on: ubuntu-latest
              steps:
                - name: 检出代码
                  uses: actions/checkout@v3
                  with:
                    ref: \${{ github.event.inputs.branch }}
                
                - name: 设置 Terraform
                  uses: hashicorp/setup-terraform@v2
                
                - name: Terraform 初始化
                  run: |
                    cd terraform/\${{ github.event.inputs.terraform_module }}
                    terraform init
                
                - name: Terraform 计划
                  run: |
                    cd terraform/\${{ github.event.inputs.terraform_module }}
                    terraform plan -out=tfplan
          EOL
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/workflows/terraform-executor.yml
          git commit -m "添加 Terraform 执行器工作流" || echo "没有变更需要提交"
          git push
