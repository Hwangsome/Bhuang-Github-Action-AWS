name: Fixed Terraform Module Selector

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        default: 'refresh_modules'
        type: choice
        options:
          - refresh_modules
          - run_terraform

permissions:
  contents: write

jobs:
  refresh-terraform-modules:
    if: github.event.inputs.action == 'refresh_modules'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取所有分支

      - name: Get all branches
        id: get-branches
        run: |
          echo "Getting branch information..."
          # Ensure we have sufficient branch information
          git fetch --prune --unshallow || git fetch --prune
          
          # Directly include known valid branches
          echo "Adding known valid branches"
          BRANCHES='["master", "test2"]'
          
          # Try to get other branches
          REMOTE_BRANCHES=$(git branch -r | grep -v HEAD | sed 's/origin\///g' | tr -d ' ' | sort -u)
          echo "Remote branches raw output:"
          echo "$REMOTE_BRANCHES"
          
          # Print raw output to log
          echo "Processing raw branch output"
          if [ -n "$REMOTE_BRANCHES" ]; then
            DETECTED_BRANCHES=$(echo "$REMOTE_BRANCHES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            if [ "$DETECTED_BRANCHES" != "[]" ] && echo "$DETECTED_BRANCHES" | jq empty 2>/dev/null; then
              echo "Using detected branches: $DETECTED_BRANCHES"
              BRANCHES=$DETECTED_BRANCHES
            else
              echo "Detection failed, using known branches"
            fi
          fi

          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "Final branches used: $BRANCHES"
      
      - name: Get Terraform modules for each branch
        id: get-modules
        run: |
          # Initialize result variables
          echo '{"message": "Initializing module mapping"}' > /tmp/debug.log
          
          # Ensure we start from a clean state
          ALL_MODULES="{}"
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH" >> /tmp/debug.log
          
          # If branch list is empty, at least include master and test2
          if [[ "${{ steps.get-branches.outputs.branches }}" == "[]" || ! "${{ steps.get-branches.outputs.branches }}" ]]; then
            echo "Branch list is empty, using default branches" | tee -a /tmp/debug.log
            BRANCH_LIST='["master", "test2"]'
          else
            BRANCH_LIST="${{ steps.get-branches.outputs.branches }}"
            echo "Using provided branch list: $BRANCH_LIST" | tee -a /tmp/debug.log
          fi
          
          # Directly scan master branch modules
          echo "Directly scanning master branch" | tee -a /tmp/debug.log
          git checkout master 2>/dev/null || echo "Unable to switch to master branch"
          
          if [ -d "terraform" ]; then
            MODULES_RAW=$(find terraform -maxdepth 1 -mindepth 1 -type d 2>/dev/null | sed 's|terraform/||g')
            if [ -n "$MODULES_RAW" ]; then
              MODULES=$(echo "$MODULES_RAW" | jq -R -s 'split("\n") | map(select(length > 0))')
              echo "Found modules in master branch: $MODULES" | tee -a /tmp/debug.log
              ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "master" --argjson modules "$MODULES" '. + {($branch): $modules}')
            else
              echo "No modules in master branch" | tee -a /tmp/debug.log
              ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "master" '. + {($branch): []}')
            fi
          else
            echo "No terraform directory in master branch" | tee -a /tmp/debug.log
            ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "master" '. + {($branch): ["ec2"]}')
          fi
          
          # Then scan test2 branch
          echo "Directly scanning test2 branch" | tee -a /tmp/debug.log
          git checkout test2 2>/dev/null || echo "Unable to switch to test2 branch"
          
          if [ -d "terraform" ]; then
            MODULES_RAW=$(find terraform -maxdepth 1 -mindepth 1 -type d 2>/dev/null | sed 's|terraform/||g')
            if [ -n "$MODULES_RAW" ]; then
              MODULES=$(echo "$MODULES_RAW" | jq -R -s 'split("\n") | map(select(length > 0))')
              echo "Found modules in test2 branch: $MODULES" | tee -a /tmp/debug.log
              ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "test2" --argjson modules "$MODULES" '. + {($branch): $modules}')
            else
              echo "No modules in test2 branch" | tee -a /tmp/debug.log
              ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "test2" '. + {($branch): []}')
            fi
          else
            echo "No terraform directory in test2 branch" | tee -a /tmp/debug.log
            ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "test2" '. + {($branch): ["ec2"]}')
          fi
          
          # Process other branches (master and test2 branches already processed)
          for branch in $(echo "$BRANCH_LIST" | jq -r '.[]'); do
            # Skip already processed branches
            if [[ "$branch" == "master" || "$branch" == "test2" ]]; then
              echo "Skipping already processed branch: $branch" >> /tmp/debug.log
              continue
            fi
            
            echo "Checking branch: $branch" | tee -a /tmp/debug.log
            
            # Try to checkout branch
            if git checkout "$branch" 2>/dev/null; then
              echo "Successfully checked out branch: $branch" >> /tmp/debug.log
              
              if [ -d "terraform" ]; then
                echo "Found terraform directory" >> /tmp/debug.log
                
                # List modules and build JSON array
                MODULES_RAW=$(find terraform -maxdepth 1 -mindepth 1 -type d 2>/dev/null | sed 's|terraform/||g')
                if [ -n "$MODULES_RAW" ]; then
                  MODULES=$(echo "$MODULES_RAW" | jq -R -s 'split("\n") | map(select(length > 0))')
                  echo "Found modules: $MODULES" >> /tmp/debug.log
                else
                  MODULES="[]"
                  echo "No modules found" >> /tmp/debug.log
                fi
                
                # Safely add to result object
                ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "$branch" --argjson modules "$MODULES" '. + {($branch): $modules}')
                echo "Updated module mapping: $ALL_MODULES" >> /tmp/debug.log
              else
                echo "No terraform directory in branch $branch" | tee -a /tmp/debug.log
                ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "$branch" '. + {($branch): []}')
              fi
            else
              echo "Unable to checkout branch: $branch - skipping" | tee -a /tmp/debug.log
            fi
          done
          
          # Ensure output is valid JSON
          if ! echo "$ALL_MODULES" | jq empty 2>/dev/null; then
            echo "Warning: Output is not valid JSON, using empty object" | tee -a /tmp/debug.log
            ALL_MODULES="{}"
          fi
          
          # Restore original branch
          git checkout "$CURRENT_BRANCH" || echo "Unable to restore original branch $CURRENT_BRANCH"
          
          # Output results
          echo "all_modules=$ALL_MODULES" >> $GITHUB_OUTPUT
          echo "All module mappings: $ALL_MODULES"
          echo "Debug log:" 
          cat /tmp/debug.log
      
      - name: Create configuration files
        run: |
          mkdir -p .github/terraform-modules
          
          # Ensure branch data includes master and test2
          echo '["master", "test2"]' > .github/terraform-modules/branches.json
          
          # Validate module data
          if echo '${{ steps.get-modules.outputs.all_modules }}' | jq empty 2>/dev/null && [ "${{ steps.get-modules.outputs.all_modules }}" != "{}" ]; then
            echo '${{ steps.get-modules.outputs.all_modules }}' > .github/terraform-modules/modules.json
          else
            echo "Warning: Module data invalid or empty, using default values"
            echo '{"master":["ec2"], "test2":["ec2"]}' > .github/terraform-modules/modules.json
          fi
          
          # Print generated file contents for debugging
          echo "Generated files:"
          echo "branches.json:"
          cat .github/terraform-modules/branches.json
          echo "modules.json:"
          cat .github/terraform-modules/modules.json
          
          # Convert files to more readable format
          echo "Formatting JSON files for better readability..."
          if command -v jq &> /dev/null; then
            jq . .github/terraform-modules/branches.json > .github/terraform-modules/branches_pretty.json
            jq . .github/terraform-modules/modules.json > .github/terraform-modules/modules_pretty.json
            mv .github/terraform-modules/branches_pretty.json .github/terraform-modules/branches.json
            mv .github/terraform-modules/modules_pretty.json .github/terraform-modules/modules.json || echo "Formatting failed, keeping original files"
          fi
      
      - name: Commit updated module list
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/terraform-modules/
          git commit -m "更新 Terraform 模块列表" || echo "没有变更需要提交"
          git push
