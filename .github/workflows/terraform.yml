name: 'Terraform PR Plan'

on:
  pull_request:
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/terraform.yml'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_REGION: 'us-east-1'

jobs:
  detect_changes:
    name: 'Detect Changed Terraform Directories'
    runs-on: ubuntu-latest
    outputs:
      terraform_dirs: ${{ steps.changed-dirs.outputs.terraform_dirs }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get Changed Terraform Directories
        id: changed-dirs
        run: |
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.tf$' || true)
          if [ -z "$CHANGED_FILES" ]; then
            echo "terraform_dirs=[]" >> $GITHUB_OUTPUT
            echo "No Terraform files changed"
          else
            DIRS=$(echo "$CHANGED_FILES" | xargs -I {} dirname {} | sort -u | jq -R -s -c 'split("\n")[:-1]')
            echo "terraform_dirs=$DIRS" >> $GITHUB_OUTPUT
            echo "Changed directories: $DIRS"
          fi

  terraform_plan:
    name: 'Terraform Plan'
    needs: [detect_changes]
    if: ${{ fromJson(needs.detect_changes.outputs.terraform_dirs)[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform_dir: ${{ fromJson(needs.detect_changes.outputs.terraform_dirs) }}
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug Info
        run: |
          echo "=== GitHub Context ==="
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "SHA: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          
          echo "=== AWS Configuration ==="
          echo "Role ARN: ${{ secrets.AWS_ROLE_ARN }}"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          
          echo "=== Environment ==="
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Name: ${{ runner.name }}"
          echo "Workspace: ${{ github.workspace }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: GitHubActions-${{ github.run_id }}
          role-duration-seconds: 900

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ matrix.terraform_dir }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ matrix.terraform_dir }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ matrix.terraform_dir }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -json tfplan > plan.json
          echo 'PLAN<<EOF' >> $GITHUB_OUTPUT
          terraform show -no-color tfplan >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        working-directory: ${{ matrix.terraform_dir }}
        continue-on-error: true

      - name: Generate Plan HTML
        id: plan-html
        run: |
          echo 'PLAN_HTML<<EOF' >> $GITHUB_OUTPUT
          echo '<h4>Directory: ${{ matrix.terraform_dir }}</h4>' >> $GITHUB_OUTPUT
          echo '<table>' >> $GITHUB_OUTPUT
          echo '<tr><th>Resource</th><th>Action</th><th>Type</th></tr>' >> $GITHUB_OUTPUT
          if [ -f plan.json ]; then
            jq -r '.resource_changes[]? | "<tr><td>" + .address + "</td><td>" + (.change.actions | join(", ")) + "</td><td>" + .type + "</td></tr>"' plan.json >> $GITHUB_OUTPUT || echo '<tr><td colspan="3">No changes</td></tr>' >> $GITHUB_OUTPUT
          else
            echo '<tr><td colspan="3">No changes</td></tr>' >> $GITHUB_OUTPUT
          fi
          echo '</table>' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        working-directory: ${{ matrix.terraform_dir }}

      - name: Update Pull Request
        uses: actions/github-script@v7
        env:
          DIR: ${{ matrix.terraform_dir }}
          PLAN: "${{ steps.plan.outputs.PLAN }}"
          PLAN_HTML: "${{ steps.plan-html.outputs.PLAN_HTML }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for \`${process.env.DIR}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Resource Changes</summary>

            ${process.env.PLAN_HTML}
            
            </details>

            <details><summary>Show Full Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
