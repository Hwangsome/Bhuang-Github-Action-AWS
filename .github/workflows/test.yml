name: 修复版 Terraform 模块选择器

on:
  workflow_dispatch:
    inputs:
      action:
        description: '操作'
        required: true
        default: 'refresh_modules'
        type: choice
        options:
          - refresh_modules
          - run_terraform

permissions:
  contents: write

jobs:
  refresh-terraform-modules:
    if: github.event.inputs.action == 'refresh_modules'
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取所有分支

      - name: 获取所有分支
        id: get-branches
        run: |
          # 获取所有分支并转为单行JSON
          BRANCHES=$(git branch -r | grep -v HEAD | sed 's/origin\///g' | tr -d ' ' | jq -c -R '[inputs | select(length>0)]' --slurp)
          # 确保JSON格式正确
          if ! echo "$BRANCHES" | jq empty 2>/dev/null; then
            echo "警告: 分支格式不正确，使用默认值"
            BRANCHES='["master"]'
          fi
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "找到的分支: $BRANCHES"
      
      - name: 获取每个分支的 Terraform 模块
        id: get-modules
        run: |
          # 初始化结果变量
          echo '{"message": "初始化模块映射"}' > /tmp/debug.log
          
          # 确保从新的空白状态开始
          ALL_MODULES="{}"
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "当前分支: $CURRENT_BRANCH" >> /tmp/debug.log
          
          # 检查分支输出是否有效
          if ! echo "${{ steps.get-branches.outputs.branches }}" | jq empty 2>/dev/null; then
            echo "警告: 分支格式不正确，使用默认值" >> /tmp/debug.log
            BRANCH_LIST='["master"]'
          else
            BRANCH_LIST="${{ steps.get-branches.outputs.branches }}"
          fi
          
          # 遍历每个分支
          echo "开始处理分支: $BRANCH_LIST" >> /tmp/debug.log
          for branch in $(echo "$BRANCH_LIST" | jq -r '.[]'); do
            echo "检查分支: $branch" | tee -a /tmp/debug.log
            
            # 尝试检出分支
            if git checkout "$branch" 2>/dev/null; then
              echo "成功检出分支: $branch" >> /tmp/debug.log
              
              if [ -d "terraform" ]; then
                echo "找到 terraform 目录" >> /tmp/debug.log
                
                # 列出模块并构建JSON数组
                MODULES_RAW=$(find terraform -maxdepth 1 -mindepth 1 -type d 2>/dev/null | sed 's|terraform/||g')
                if [ -n "$MODULES_RAW" ]; then
                  MODULES=$(echo "$MODULES_RAW" | jq -R -s 'split("\n") | map(select(length > 0))')
                  echo "找到模块: $MODULES" >> /tmp/debug.log
                else
                  MODULES="[]"
                  echo "未找到模块" >> /tmp/debug.log
                fi
                
                # 安全地添加到结果对象
                ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "$branch" --argjson modules "$MODULES" '. + {($branch): $modules}')
                echo "更新后的模块映射: $ALL_MODULES" >> /tmp/debug.log
              else
                echo "分支 $branch 中没有 terraform 目录" | tee -a /tmp/debug.log
                ALL_MODULES=$(echo "$ALL_MODULES" | jq -c --arg branch "$branch" '. + {($branch): []}')
              fi
            else
              echo "无法检出分支: $branch - 忽略" | tee -a /tmp/debug.log
            fi
          done
          
          # 确保输出有效JSON
          if ! echo "$ALL_MODULES" | jq empty 2>/dev/null; then
            echo "警告: 输出非有效JSON，使用空对象" | tee -a /tmp/debug.log
            ALL_MODULES="{}"
          fi
          
          # 恢复原分支
          git checkout "$CURRENT_BRANCH" || echo "无法恢复原分支 $CURRENT_BRANCH"
          
          # 输出结果
          echo "all_modules=$ALL_MODULES" >> $GITHUB_OUTPUT
          echo "所有模块映射: $ALL_MODULES"
          echo "调试日志:" 
          cat /tmp/debug.log
      
      - name: 创建配置文件
        run: |
          mkdir -p .github/terraform-modules
          
          # 验证分支数据
          if echo '${{ steps.get-branches.outputs.branches }}' | jq empty 2>/dev/null; then
            echo '${{ steps.get-branches.outputs.branches }}' > .github/terraform-modules/branches.json
          else
            echo "警告: 分支数据无效，使用默认值"
            echo '["master"]' > .github/terraform-modules/branches.json
          fi
          
          # 验证模块数据
          if echo '${{ steps.get-modules.outputs.all_modules }}' | jq empty 2>/dev/null; then
            echo '${{ steps.get-modules.outputs.all_modules }}' > .github/terraform-modules/modules.json
          else
            echo "警告: 模块数据无效，使用默认值"
            echo '{"master":["ec2"]}' > .github/terraform-modules/modules.json
          fi
          
          # 打印生成的文件内容以便调试
          echo "生成的文件:"
          echo "branches.json:"
          cat .github/terraform-modules/branches.json
          echo "modules.json:"
          cat .github/terraform-modules/modules.json
          
          # 将文件转换为更易读的格式
          echo "将JSON文件格式化为更易读的格式..."
          if command -v jq &> /dev/null; then
            jq . .github/terraform-modules/branches.json > .github/terraform-modules/branches_pretty.json
            jq . .github/terraform-modules/modules.json > .github/terraform-modules/modules_pretty.json
            mv .github/terraform-modules/branches_pretty.json .github/terraform-modules/branches.json
            mv .github/terraform-modules/modules_pretty.json .github/terraform-modules/modules.json || echo "格式化失败，保留原始文件"
          fi
      
      - name: 提交更新的模块列表
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/terraform-modules/
          git commit -m "更新 Terraform 模块列表" || echo "没有变更需要提交"
          git push

  terraform-operations:
    if: github.event.inputs.action == 'run_terraform'
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 读取模块信息
        id: read-modules
        run: |
          if [ -f .github/terraform-modules/branches.json ] && [ -f .github/terraform-modules/modules.json ]; then
            echo "文件存在，读取数据..."
            BRANCHES=$(cat .github/terraform-modules/branches.json)
            MODULES=$(cat .github/terraform-modules/modules.json)
            echo "branches=$(echo $BRANCHES | jq -c .)" >> $GITHUB_OUTPUT
            echo "modules=$(echo $MODULES | jq -c .)" >> $GITHUB_OUTPUT
          else
            echo "错误: 模块信息文件不存在，请先运行 refresh_modules 操作"
            exit 1
          fi

      - name: 生成分支选项
        id: generate-options
        run: |
          # 从JSON中提取分支名称并格式化为YAML选项
          BRANCH_OPTIONS=""
          for branch in $(echo '${{ steps.read-modules.outputs.branches }}' | jq -r '.[]'); do
            BRANCH_OPTIONS="${BRANCH_OPTIONS}            - ${branch}\n"
          done
          
          # 将选项保存为环境变量
          echo "BRANCH_OPTIONS<<EOF" >> $GITHUB_ENV
          echo -e "$BRANCH_OPTIONS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: 创建 Terraform 执行工作流
        run: |
          mkdir -p .github/workflows
          
          cat > .github/workflows/terraform-executor.yml << EOL
          name: Terraform 执行器
          
          on:
            workflow_dispatch:
              inputs:
                branch:
                  description: '选择分支'
                  required: true
                  type: choice
                  options:
          $BRANCH_OPTIONS
                terraform_module:
                  description: '选择 Terraform 模块'
                  required: true
                  type: string
                environment:
                  description: '选择环境'
                  required: true
                  type: choice
                  options:
                    - dev
                    - test
                    - prod
                action:
                  description: '执行操作'
                  required: true
                  type: choice
                  options:
                    - plan
                    - apply
                    - destroy
          
          jobs:
            terraform-plan:
              runs-on: ubuntu-latest
              steps:
                - name: 检出代码
                  uses: actions/checkout@v3
                  with:
                    ref: \${{ github.event.inputs.branch }}
                
                - name: 设置 Terraform
                  uses: hashicorp/setup-terraform@v2
                
                - name: Terraform 初始化
                  run: |
                    cd terraform/\${{ github.event.inputs.terraform_module }}
                    terraform init
                
                - name: Terraform 计划
                  run: |
                    cd terraform/\${{ github.event.inputs.terraform_module }}
                    terraform plan -out=tfplan
                
                - name: Terraform 应用
                  if: github.event.inputs.action == 'apply'
                  run: |
                    cd terraform/\${{ github.event.inputs.terraform_module }}
                    terraform apply -auto-approve tfplan
                
                - name: Terraform 销毁
                  if: github.event.inputs.action == 'destroy'
                  run: |
                    cd terraform/\${{ github.event.inputs.terraform_module }}
                    terraform destroy -auto-approve
          EOL
          
          echo "工作流文件已创建: .github/workflows/terraform-executor.yml"
          cat .github/workflows/terraform-executor.yml
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/workflows/terraform-executor.yml
          git commit -m "添加 Terraform 执行器工作流" || echo "没有变更需要提交"
          git push
