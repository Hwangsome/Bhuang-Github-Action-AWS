name: 'Universal Terraform Workflow'

on:
  workflow_dispatch:
    inputs:
      workflow_from:
        description: 'Use workflow from'
        required: true
        type: choice
        options:
          - master
          - test2
        default: 'master'
      terraform_directory:
        description: 'Select Terraform directory (auto-updated)'
        required: true
        type: choice
        options:
          - terraform/ec2
        default: 'terraform/ec2'
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
        default: 'plan'

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  AWS_REGION: 'us-west-2'

jobs:
  load_options:
    name: 'Load Directory Options'
    runs-on: ubuntu-latest
    outputs:
      terraform_directory: ${{ steps.set_directory.outputs.terraform_directory }}
      current_branch: ${{ steps.get_branch.outputs.branch_name }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.workflow_from }}
          fetch-depth: 0 # 获取完整的git历史以访问分支信息
      
      - name: Get Current Branch
        id: get_branch
        run: |
          # 使用选定的工作流分支
          BRANCH_NAME="${{ github.event.inputs.workflow_from }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using workflow from branch: $BRANCH_NAME"
      
      - name: Debug - List Repository Structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository root contents:"
          ls -la
          
          echo "Checking .github directory:"
          ls -la .github || echo ".github directory not found"
          
          echo "Checking terraform-modules directory:"
          ls -la .github/terraform-modules || echo ".github/terraform-modules directory not found"
          
          echo "Checking for modules.json:"
          if [ -f ".github/terraform-modules/modules.json" ]; then
            echo "modules.json content:"
            cat .github/terraform-modules/modules.json
          else
            echo "modules.json file not found"
          fi
          
      - name: Ensure Required Directories Exist
        run: |
          mkdir -p .github/terraform-modules
          
          # 如果modules.json不存在，创建一个默认的
          if [ ! -f ".github/terraform-modules/modules.json" ]; then
            echo "Creating default modules.json file"
            echo '{
              "master": ["ec2"],
              "test2": ["ec2"]
            }' > .github/terraform-modules/modules.json
            cat .github/terraform-modules/modules.json
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install Dependencies
        run: |
          npm install @actions/core js-yaml
      
      - name: Read Module Configuration
        id: read_modules
        run: |
          BRANCH="${{ steps.get_branch.outputs.branch_name }}"
          echo "Reading modules for branch: $BRANCH"
          
          if [ -f ".github/terraform-modules/modules.json" ]; then
            # Extract modules for the current branch
            MODULES=$(node -e "
              const fs = require('fs');
              const data = JSON.parse(fs.readFileSync('.github/terraform-modules/modules.json', 'utf8'));
              const branch = '$BRANCH';
              if (data[branch]) {
                console.log(data[branch].map(m => 'terraform/' + m).join('\n'));
              } else {
                console.log('terraform/ec2');
              }
            ")
            echo "Found modules for branch $BRANCH: $MODULES"
          else
            echo "modules.json not found, using default module"
            MODULES="terraform/ec2"
          fi
          
          echo "modules<<EOF" >> $GITHUB_OUTPUT
          echo "$MODULES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get first module as default
          DEFAULT_MODULE=$(echo "$MODULES" | head -n 1)
          echo "default_module=$DEFAULT_MODULE" >> $GITHUB_OUTPUT
      
      - name: Set Directory Based on Configuration
        id: set_directory
        run: |
          # Use the selected directory if it's in the list of available modules, otherwise use the default
          SELECTED_DIR="${{ github.event.inputs.terraform_directory }}"
          AVAILABLE_MODULES="${{ steps.read_modules.outputs.modules }}"
          DEFAULT_MODULE="${{ steps.read_modules.outputs.default_module }}"
          
          if [[ "$AVAILABLE_MODULES" == *"$SELECTED_DIR"* ]]; then
            echo "Using selected directory: $SELECTED_DIR"
            FINAL_DIR="$SELECTED_DIR"
          else
            echo "Selected directory not available for this branch, using default: $DEFAULT_MODULE"
            FINAL_DIR="$DEFAULT_MODULE"
          fi
          
          echo "terraform_directory=$FINAL_DIR" >> $GITHUB_OUTPUT
          
  terraform_run:
    name: 'Terraform ${{ github.event.inputs.action }}'
    needs: load_options
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.workflow_from }}
          
      - name: Show Working Branch
        run: |
          echo "Running Terraform workflow on branch: ${{ needs.load_options.outputs.current_branch }}"
          echo "Using Terraform directory: ${{ needs.load_options.outputs.terraform_directory }}"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"
      
      - name: Check Directory Existence
        run: |
          if [ -d "${{ needs.load_options.outputs.terraform_directory }}" ]; then
            echo "Directory ${{ needs.load_options.outputs.terraform_directory }} exists"
          else
            echo "Directory ${{ needs.load_options.outputs.terraform_directory }} does not exist"
            echo "Creating directory..."
            mkdir -p "${{ needs.load_options.outputs.terraform_directory }}"
            
            # 创建一个基本的 Terraform 文件
            echo 'provider "aws" {
              region = "us-west-2"
            }
            
            # 占位资源
            resource "aws_s3_bucket" "example" {
              bucket_prefix = "example-bucket-"
              tags = {
                Environment = "Dev"
                Created     = "Terraform"
              }
            }' > "${{ needs.load_options.outputs.terraform_directory }}/main.tf"
            
            echo "Created basic Terraform configuration"
          fi
          
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ needs.load_options.outputs.terraform_directory }}
        continue-on-error: true
        
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ needs.load_options.outputs.terraform_directory }}
        
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ needs.load_options.outputs.terraform_directory }}
        
      - name: Terraform Plan
        id: plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -json tfplan > plan.json
          echo 'PLAN<<EOF' >> $GITHUB_OUTPUT
          terraform show -no-color tfplan >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        working-directory: ${{ needs.load_options.outputs.terraform_directory }}
        
      - name: Terraform Apply
        id: apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ needs.load_options.outputs.terraform_directory }}
        
      - name: Generate Summary
        id: summary
        run: |
          echo "### Terraform Results" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ needs.load_options.outputs.current_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Directory:** ${{ needs.load_options.outputs.terraform_directory }}" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Status" >> $GITHUB_STEP_SUMMARY
          echo "* Format and Style 🖌 \`${{ steps.fmt.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "* Initialization ⚙️ \`${{ steps.init.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "* Validation 🤖 \`${{ steps.validate.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.action }}" == "plan" ] || [ "${{ github.event.inputs.action }}" == "apply" ]; then
            echo "* Plan 📖 \`${{ steps.plan.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            echo "* Apply 🚀 \`${{ steps.apply.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f plan.json ]; then
            echo "#### Resource Changes" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>Show Changes</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Resource | Action | Type |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|--------|------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.resource_changes[]? | "| " + .address + " | " + (.change.actions | join(", ")) + " | " + .type + " |"' plan.json >> $GITHUB_STEP_SUMMARY || echo "| No changes | - | - |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
        working-directory: ${{ needs.load_options.outputs.terraform_directory }}
