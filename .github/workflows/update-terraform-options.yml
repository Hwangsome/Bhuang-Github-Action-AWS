name: 'Update Terraform Workflow Options'

on:
  # 手动触发
  workflow_dispatch:
  # 当模块配置文件更改时自动触发
  push:
    paths:
      - '.github/terraform-modules/**'
      - '**/*.tf'
  # 定期自动运行
  schedule:
    - cron: '0 0 * * *'  # 每天一次

permissions:
  contents: write
  pull-requests: read

jobs:
  update_workflow:
    name: 'Update workflow options'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 需要完整的仓库历史来获取所有分支
      
      - name: Get Branch List
        id: get_branches
        run: |
          # 获取可用分支列表
          git fetch --all
          
          # 寻找所有有Terraform配置的分支
          BRANCHES=$(git branch -r | sed 's/origin\///' | grep -v 'HEAD' | sort)
          
          echo "Found branches: $BRANCHES"
          
          # 保存分支列表到JSON文件
          echo "[" > .github/terraform-modules/branches.json
          FIRST=true
          for branch in $BRANCHES; do
            if $FIRST; then
              FIRST=false
              echo "  \"$branch\"" >> .github/terraform-modules/branches.json
            else
              echo "  ,\"$branch\"" >> .github/terraform-modules/branches.json
            fi
          done
          echo "]" >> .github/terraform-modules/branches.json
          
          # 创建分支选项字符串
          BRANCH_OPTIONS=""
          for branch in $BRANCHES; do
            BRANCH_OPTIONS="${BRANCH_OPTIONS}          $branch\n"
          done
          
          echo "branch_options<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BRANCH_OPTIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Scan Terraform Modules
        id: scan_modules
        run: |
          # 为每个分支创建临时目录而不是依赖git分支切换
          mkdir -p /tmp/terraform-scan
          
          # 创建空的modules.json以跟踪模块
          echo "{" > /tmp/terraform-scan/modules.json
          FIRST_BRANCH=true
          
          for branch in $(cat .github/terraform-modules/branches.json | jq -r '.[]'); do
            echo "Scanning branch: $branch"
            
            # 创建分支特定的临时目录
            BRANCH_DIR="/tmp/terraform-scan/$branch"
            mkdir -p "$BRANCH_DIR"
            
            # 直接使用git archive获取分支内容到临时目录，避免切换分支
            if git rev-parse --verify origin/$branch >/dev/null 2>&1; then
              git archive --remote=. origin/$branch | tar -x -C "$BRANCH_DIR"
              echo "Successfully extracted branch: $branch"
            else
              echo "Branch $branch does not exist or is not accessible, skipping"
              continue
            fi
            
            # 在临时目录中查找Terraform模块
            if [ -d "$BRANCH_DIR/terraform" ]; then
              MODULES=$(find "$BRANCH_DIR/terraform" -name "*.tf" | xargs -I{} dirname {} 2>/dev/null | sort -u | grep -v "modules" | sed "s|$BRANCH_DIR/terraform/||")
            else
              echo "No terraform directory in branch $branch"
              MODULES=""
            fi
            
            # 如果有模块，添加到JSON
            if [ ! -z "$MODULES" ]; then
              if $FIRST_BRANCH; then
                FIRST_BRANCH=false
                echo "  \"$branch\": [" >> /tmp/terraform-scan/modules.json
              else
                echo "  ,\"$branch\": [" >> /tmp/terraform-scan/modules.json
              fi
              
              FIRST_MODULE=true
              for module in $MODULES; do
                if $FIRST_MODULE; then
                  FIRST_MODULE=false
                  echo "    \"$module\"" >> /tmp/terraform-scan/modules.json
                else
                  echo "    ,\"$module\"" >> /tmp/terraform-scan/modules.json
                fi
              done
              
              echo "  ]" >> /tmp/terraform-scan/modules.json
            fi
          done
          
          echo "}" >> /tmp/terraform-scan/modules.json
          
          # 复制结果到仓库
          mkdir -p .github/terraform-modules
          cp /tmp/terraform-scan/modules.json .github/terraform-modules/
      
      - name: Update Universal Workflow File
        run: |
          # 读取分支选项
          BRANCH_OPTIONS='${{ steps.get_branches.outputs.branch_options }}'
          
          # 读取当前工作流文件
          if [ -f ".github/workflows/universal-terraform.yml" ]; then
            # 修复方法：使用临时文件处理多行变量替换
            echo "          <!-- BRANCH_OPTIONS -->" > temp_section.txt
            echo "$BRANCH_OPTIONS" >> temp_section.txt
            echo "        default: 'master'" >> temp_section.txt
            
            # 使用sed的读取文件功能实现替换
            sed -i '/<!-- BRANCH_OPTIONS -->/,/default: /{
              /<!-- BRANCH_OPTIONS -->/!{/default: /!d}
              /default: /r temp_section.txt
              /default: /d
              /<!-- BRANCH_OPTIONS -->/d
            }' .github/workflows/universal-terraform.yml
            
            rm temp_section.txt
          else
            # 如果文件不存在，从模板创建
            echo "Creating new universal workflow file from template"
            # 这里您可以复制通用工作流模板
            # ...
          fi
      
      - name: Commit and Push Changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          git add .github/terraform-modules/branches.json
          git add .github/terraform-modules/modules.json
          git add .github/workflows/universal-terraform.yml || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Terraform workflow options [skip ci]"
            git push
          fi
