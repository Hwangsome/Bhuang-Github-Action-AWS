name: 'Update Terraform Directory Options'

on:
  # 手动触发扫描
  workflow_dispatch:
  # 当Terraform文件变更时自动扫描master分支
  push:
    branches:
      - master
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
  # 定期自动扫描master分支
  schedule:
    - cron: '*/5 * * * *'  # 每5分钟自动运行一次

permissions:
  contents: write     # 需要写权限来更新workflow文件

jobs:
  update_options:
    name: 'Update Terraform Options'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取全部历史记录以访问所有分支
      
      - name: Find Terraform Directories
        id: find-tf-dirs
        run: |
          echo "Scanning repository for Terraform directories..."
          
          # 查找所有包含.tf文件的目录
          echo "Finding all directories containing Terraform (.tf) files..."
          DIRS=$(find . -type f -name "*.tf" | xargs -I{} dirname {} 2>/dev/null | sort -u | grep -v "^\.$" | sed 's|^\./||')
          
          if [ -z "$DIRS" ]; then
            echo "No Terraform directories found in this repository"
            exit 1
          fi
          
          echo "Found $(echo "$DIRS" | wc -l) Terraform directories"
          
          # 将目录列表转换为YAML格式的选项
          OPTIONS=""
          echo "Converting to YAML format for GitHub Actions dropdown..."
          while IFS= read -r dir; do
            if [ ! -z "$dir" ]; then
              OPTIONS="${OPTIONS}          - ${dir}\n"
              echo "  - ${dir}"
            fi
          done <<< "$DIRS"
          
          # 保存为输出变量
          echo "options<<EOF" >> $GITHUB_OUTPUT
          echo -e "$OPTIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # 获取第一个目录作为默认值
          DEFAULT_DIR=$(echo "$DIRS" | head -n 1)
          echo "default_dir=${DEFAULT_DIR}" >> $GITHUB_OUTPUT
          echo "Set default directory to: ${DEFAULT_DIR}"
      
      - name: Update Workflow File
        run: |
          echo "Updating terraform-manual.yml with dynamically discovered Terraform directories..."
          
          OPTIONS='${{ steps.find-tf-dirs.outputs.options }}'
          DEFAULT_DIR='${{ steps.find-tf-dirs.outputs.default_dir }}'
          
          # 构建新的输入部分
          NEW_INPUT="      target_directory:\n        description: 'Select Terraform directory (auto-updated)'\n        required: true\n        type: choice\n        options:\n${OPTIONS}        default: '${DEFAULT_DIR}'"
          
          # 备份原始文件
          cp .github/workflows/terraform-manual.yml .github/workflows/terraform-manual.yml.bak
          
          # 使用sed更新workflow文件
          sed -i -E '/target_directory:/,/default: /c\'"$NEW_INPUT" .github/workflows/terraform-manual.yml
          
          # 检查是否有更改
          if diff -q .github/workflows/terraform-manual.yml .github/workflows/terraform-manual.yml.bak > /dev/null; then
            echo "No changes needed - options list is already up to date"
          else
            echo "Updated terraform-manual.yml with new Terraform directory options"
            echo "New options list:"
            grep -A 20 "target_directory:" .github/workflows/terraform-manual.yml
          fi
          
          # 删除备份
          rm .github/workflows/terraform-manual.yml.bak
      
      - name: Determine Target Branch
        id: get-branch
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # 获取当前分支
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # 手动触发，使用当前分支
            TARGET_BRANCH="${{ github.ref_name }}"
            echo "Manual trigger, using current branch: $TARGET_BRANCH"
          else
            # 自动触发，只扫描 master 分支
            TARGET_BRANCH="master"
            echo "Automatic trigger, using master branch"
          fi
          
          # 检查分支是否存在
          if ! git show-ref --verify --quiet refs/remotes/origin/$TARGET_BRANCH; then
            echo "Branch $TARGET_BRANCH does not exist!"
            exit 1
          fi
          
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "Will update terraform-manual.yml in branch: $TARGET_BRANCH"
          
      - name: Get Terraform Directories
        id: get-tf-dirs
        run: |
          # 执行我们之前的收集目录的逻辑
          echo "Scanning repository for Terraform directories..."
          
          # 查找所有包含.tf文件的目录
          echo "Finding all directories containing Terraform (.tf) files..."
          DIRS=$(find . -type f -name "*.tf" | xargs -I{} dirname {} 2>/dev/null | sort -u | grep -v "^\.$" | sed 's|^\./||')
          
          if [ -z "$DIRS" ]; then
            echo "No Terraform directories found in this repository"
            exit 1
          fi
          
          echo "Found $(echo "$DIRS" | wc -l) Terraform directories"
          
          # 将目录列表转换为YAML格式的选项
          OPTIONS=""
          echo "Converting to YAML format for GitHub Actions dropdown..."
          while IFS= read -r dir; do
            if [ ! -z "$dir" ]; then
              OPTIONS="${OPTIONS}          - ${dir}\n"
              echo "  - ${dir}"
            fi
          done <<< "$DIRS"
          
          # 保存为输出变量
          echo "options<<EOF" >> $GITHUB_OUTPUT
          echo -e "$OPTIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # 获取第一个目录作为默认值
          DEFAULT_DIR=$(echo "$DIRS" | head -n 1)
          echo "default_dir=${DEFAULT_DIR}" >> $GITHUB_OUTPUT
          echo "Set default directory to: ${DEFAULT_DIR}"
      
      - name: Update Terraform Manual Workflow
        run: |
          TARGET_BRANCH='${{ steps.get-branch.outputs.target_branch }}'
          OPTIONS='${{ steps.get-tf-dirs.outputs.options }}'
          DEFAULT_DIR='${{ steps.get-tf-dirs.outputs.default_dir }}'
          
          echo "\n====== Updating branch: $TARGET_BRANCH ======"
          
          # 检出目标分支
          git checkout $TARGET_BRANCH || { echo "Failed to checkout branch $TARGET_BRANCH"; exit 1; }
          git pull origin $TARGET_BRANCH
          
          # 检查文件是否存在
          if [ ! -f .github/workflows/terraform-manual.yml ]; then
            echo "terraform-manual.yml does not exist in branch $TARGET_BRANCH!"
            exit 1
          fi
          
          # 构建新的输入部分
          NEW_INPUT="      target_directory:\n        description: 'Select Terraform directory (auto-updated)'\n        required: true\n        type: choice\n        options:\n${OPTIONS}        default: '${DEFAULT_DIR}'"
          
          # 备份原始文件
          cp .github/workflows/terraform-manual.yml .github/workflows/terraform-manual.yml.bak
          
          # 使用sed更新workflow文件
          sed -i -E '/target_directory:/,/default: /c\'"$NEW_INPUT" .github/workflows/terraform-manual.yml
          
          # 检查是否有更改
          if diff -q .github/workflows/terraform-manual.yml .github/workflows/terraform-manual.yml.bak > /dev/null; then
            echo "No changes needed - options list is already up to date"
            rm .github/workflows/terraform-manual.yml.bak
            exit 0
          fi
          
          # 删除备份
          rm .github/workflows/terraform-manual.yml.bak
          
          echo "Updated terraform-manual.yml with new Terraform directory options"
          
          # 提交更改
          git add .github/workflows/terraform-manual.yml
          
          # 提交并推送到目标分支
          git commit -m "[Automated] Update Terraform directory options in workflow"
          git push origin $TARGET_BRANCH
          
          echo "✅ Successfully updated Terraform directory options in terraform-manual.yml on branch $TARGET_BRANCH"
